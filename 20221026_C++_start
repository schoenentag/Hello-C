// 20221026_start.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

// 헤더 파일
#include <iostream> // 입출력
#include <string> // 문자열
#include <cmath> //수학

using namespace std; //라이브러이의 이름

// Declare a structure named "car"
struct car {
    string brand;
    string model;
    int year;
};

//function
void swapNums(int& firstNum, int& secondNum) {
    int temp = firstNum;
    firstNum = secondNum;
    secondNum = temp;
}

void arrFunction(int numbers[5]) {
   //cout << *(numbers + 0) << *(numbers + 1) << *(numbers + 2) << *(numbers + 3) << *(numbers + 4);
   //cout << " sizeof(numbers) / sizeof(int) : " << sizeof(numbers) / sizeof(int); //출력값 : 2 <<- 배열의 주소가 넘어와서 2가 출력됨
    
    for (int i = 0; i < 5; i++) {
        cout << "배열로 담은 값  "<< i <<" : "<< numbers[i] << endl;
    }
}

//class
class MyClass {
    public:
        void myMethod();// { cout << "Hello myMethod!" << endl; }; // 내부메소드
};

void MyClass::myMethod() {
    cout << "Helo myMethod!" << endl;
};

int main()
{
    //cout (출력 + 삽입연산자 <<)
    string greeting = "Hello World!";
    string firstName = "\"John";
    string lastName = "Doe\"";
    string fullName = firstName.append(lastName);
    cout << greeting << " " << fullName <<"님!" <<endl; // using namespace가 생략된다면 std키워드로 대체 가능std::count << "Hello World";

    //변수
    int mon = 10;
    int day = 26;
    cout << "오늘은 " << mon << "월" << day << "일입니다!" << endl;
    cout << mon << " + " << day << " = " << mon+day << endl;
    
    //상수
    const int minutesPeHour = 60;
    const float PI = 3.14;
    cout << "상수 : " << minutesPeHour << endl; 

    //cin (입력 + 추출 연산자 >>)
    //int x;
    int x = 10;
    cout << "숫자를 입력하세요 : ";
    //cin >> x;
    cout << "당신이 입력한 값은 ... " << x << "입니다." <<endl;


    // Assignment Operators
    int y = 10;
    y += 5;
    cout << "y의 값은 ... " << y << endl;

    // Comparison Operators (비교연산자)
    cout << "x의 값은 "<< x <<", y의 값은 " << y << ", 비교 연산자 결과는 " <<(x > y) <<"입니다." << endl;

    // ========================= Math
    cout << x << "와 " << y << " 중 큰 값은 "<< max(x, y) <<"입니다." << endl;
    cout << sqrt(64) <<endl; //제곱근
    cout << round(2.6) <<endl;
    cout << log(2) <<endl;

    //배열의 크기
    int myNumbers[5] = { 10,20,30,40,50 };
    cout <<"myNumbers의 배열의 크기(바이트단위) sizeof : "<< sizeof(myNumbers) <<endl; //결과 20(바이트 단위) , 4바이트 x 5개의 요소=20바이트

    int getArrayLength = sizeof(myNumbers) / sizeof(int);
    cout << "myNumbers의 배열의 요소 갯수 : " << getArrayLength << endl;

    //Array List loop
    for (int i = 0; i < 5; i++) {
        cout << myNumbers[i] << endl;
    } // 사이즈를 고정시키는 것은 지양
    
    for (int i = 0; i < sizeof(myNumbers) / sizeof(int); i++) {
        cout << myNumbers[i] << endl;
    }

    // ========================= structures(struct)
    struct {
        int myNum;
        string myString;
    } myStructure;
     
    // 생성된 구조체 사용
    myStructure.myNum = 1;
    myStructure.myString = "struct 사용해봄!";
    cout << myStructure.myNum << endl;
    cout << myStructure.myString << endl;

    // Named Structures
    car myCar1; // 구조 이름을 변수의 데이터 유형으로 사용
    myCar1.brand = "BMW";
    myCar1.model = "X5";
    myCar1.year = 1999;

    car myCar2;
    myCar2.brand = "Ford";
    myCar2.model = "Mustang";
    myCar2.year = 1969;

    cout << myCar1.brand << " " << myCar1.model << " " << myCar1.year << "\n";
    cout << myCar2.brand << " " << myCar2.model << " " << myCar2.year << "\n";

    // ========================= References (참조)
    // &연산자 1. used to create a reference variable 2. used to get the memory address of a variable

    string food = "Pizza";
    string &meal = food;
    string* ptr = &food; // 포인터의 선언
    string **pptr = &ptr; // 포인터의 참조

    //string fruit = "apple"; // 변수를 생성하면 변수에 메모리 주소가 할당됨
    
    cout << "food : "<< food << ", food를 참조한 meal :  " << meal << endl; // 참조
    cout << "food의 주소값 : " << &food << endl; //주소값 : 0000004D204FF778
    cout << "meal의 주소값 : " << &meal << endl; //주소값 : 0000004D204FF778
    // ========================= pointer
    // 포인터 : 메모리 주소 값을 저장하는 변수 (데이터 유형은 int 또는 string ) , * 연산자로 생성 
    cout << "포인터 변수 ptr의 값 : " << ptr << endl; //주소값 출력
    cout << "포인터 변수 *ptr의 값 : " << *ptr << endl; //역참조 연산자, 포인터를 사용하면  Pizza의 값을 가져옴

    cout << "포인터 변수 pptr의 값 : " << pptr << endl; //주소값 : 0000004D204FF7D8
    cout << "포인터 변수 *pptr의 값 : " << *pptr << endl; // 주소값 : 0000004D204FF778
    cout << "포인터 변수 **pptr의 값 : " << **pptr << endl; //역참조 : Pizza
    *ptr = "Hamburger"; // 포인터 값 수정
    cout << "=== Hamburger로 포인터 값 수정, 주소는 변하지 않고 값만 변한다." << endl;
    cout << "포인터 변수 ptr의 값 : " << ptr << endl; 
    cout << "포인터 변수 *ptr의 값 : " << *ptr << endl; 
    cout << "food : " << food << endl; 

    // 포인터 + 배열

    int arr[3] = { 10,20,30 }; // 배열 선언
    int* ptr_arr = arr; //포인터에 배열의 이름을 대입함

    cout << "배열의 이름을 이용하여 배열 요소에 접근 >> arr[0] : " << arr[0] << ", arr[1] : " << arr[1] << ", arr[2] : " << arr[2] << endl;
    cout << "포인터로 배열 접근 >> ptr_arr[0] : " << ptr_arr[0] << ", ptr_arr[1] : " << ptr_arr[1] << ", ptr_arr[2] : " << ptr_arr[2] << endl;
    cout << "배열의 이름을 이용한 배열의 크기 계산 : " << sizeof(arr) << endl; // 결과 12 : 4바이트 x 3개의 요소 = 12바이트
    cout << "포인터로 접근한 배열의 크기 계산 : " << sizeof(ptr_arr); // 결과 8 :  배열의 크기가 아닌 포인터 변수 자체의 크기가 출력
  
    // 배열의 포인터 연산 arr[n] == *(arr + n)
    cout << "배열의 이름을 이용하여 배열 요소에 접근 >> arr[0] : " << arr[0] << ", arr[1] : " << arr[1] << ", arr[2] : " << arr[2] << endl;
    cout << "배열의 이름으로 포인터 연산을 해 배열 요소에 접근  *(arr+0) : " << *(arr + 0) << ", *(arr+1) : " << *(arr + 1) << ", *(arr+2) : " << *(arr + 2) << endl;

    // c++ 함수 (참조로 전달)
    int firstNum = 10;
    int secondNum = 20;

    cout << "Before swap : " << endl;
    cout << firstNum << secondNum << endl;


    swapNums(firstNum, secondNum);

    cout << "After swap: " << endl;
    cout << firstNum << secondNum << endl;

    int arr_f[5] = { 1,2,3,4,5 };
    cout << "sizeof(arr_f) : " << sizeof(arr_f) << endl;
    arrFunction(arr_f);

    //class
    MyClass myObj;
    myObj.myMethod();



    return 0; //기능 종료
}




// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
